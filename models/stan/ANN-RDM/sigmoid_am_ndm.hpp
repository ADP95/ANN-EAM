
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace sigmoid_am_ndm_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 185> locations_array__ = 
{" (found before start of program)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 85, column 4 to column 14)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 86, column 4 to column 14)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 87, column 4 to column 27)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 88, column 4 to column 30)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 89, column 4 to column 18)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 90, column 4 to column 14)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 91, column 4 to column 16)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 92, column 4 to column 16)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 94, column 4 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 95, column 4 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 96, column 4 to column 36)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 97, column 4 to column 39)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 98, column 4 to column 27)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 99, column 4 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 100, column 4 to column 25)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 101, column 4 to column 25)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 103, column 4 to column 16)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 104, column 4 to column 16)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 105, column 4 to column 29)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 106, column 4 to column 32)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 107, column 4 to column 20)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 108, column 4 to column 16)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 109, column 4 to column 18)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 110, column 4 to column 18)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 115, column 4 to column 36)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 116, column 4 to column 39)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 117, column 4 to column 40)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 118, column 4 to column 43)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 119, column 4 to column 21)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 121, column 4 to column 31)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 122, column 4 to column 27)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 123, column 4 to column 29)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 124, column 4 to column 29)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 125, column 4 to column 40)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 126, column 4 to column 43)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 127, column 4 to column 18)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 128, column 4 to column 18)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 130, column 4 to column 34)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 131, column 4 to column 30)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 132, column 4 to column 32)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 133, column 4 to column 32)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 134, column 4 to column 43)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 135, column 4 to column 46)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 136, column 4 to column 30)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 137, column 4 to column 30)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 139, column 4 to column 45)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 140, column 4 to column 37)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 141, column 4 to column 41)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 142, column 4 to column 41)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 143, column 4 to column 63)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 144, column 4 to column 69)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 145, column 4 to column 37)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 146, column 4 to column 37)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 149, column 8 to column 70)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 150, column 8 to column 54)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 151, column 8 to column 62)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 152, column 8 to column 62)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 153, column 8 to column 106)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 154, column 8 to column 118)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 155, column 8 to column 54)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 156, column 8 to column 54)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 148, column 19 to line 157, column 5)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 148, column 4 to line 157, column 5)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 160, column 8 to column 147)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 161, column 8 to column 109)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 163, column 8 to column 65)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 164, column 8 to column 71)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 166, column 8 to column 122)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 159, column 19 to line 167, column 5)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 159, column 4 to line 167, column 5)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 202, column 4 to column 22)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 205, column 12 to line 207, column 67)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 204, column 22 to line 208, column 9)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 204, column 8 to line 208, column 9)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 203, column 4 to line 209, column 5)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 171, column 4 to column 73)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 172, column 4 to column 76)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 173, column 4 to column 44)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 174, column 4 to column 44)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 175, column 4 to column 56)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 176, column 4 to column 44)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 177, column 4 to column 46)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 178, column 4 to column 46)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 180, column 4 to column 73)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 181, column 4 to column 76)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 182, column 4 to column 44)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 183, column 4 to column 44)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 184, column 4 to column 56)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 185, column 4 to column 44)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 186, column 4 to column 46)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 187, column 4 to column 46)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 189, column 4 to column 36)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 190, column 4 to column 39)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 191, column 4 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 192, column 4 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 193, column 4 to column 27)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 194, column 4 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 195, column 4 to column 25)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 196, column 4 to column 25)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 198, column 4 to column 91)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 53, column 4 to column 19)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 54, column 4 to column 19)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 55, column 38 to column 39)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 55, column 4 to column 41)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 57, column 16 to column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 57, column 4 to column 19)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 58, column 27 to column 28)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 58, column 4 to column 30)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 59, column 34 to column 35)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 59, column 4 to column 37)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 60, column 21 to column 22)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 60, column 4 to column 24)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 62, column 15 to column 16)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 62, column 4 to column 18)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 63, column 4 to column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 65, column 4 to column 31)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 66, column 4 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 67, column 4 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 68, column 4 to column 27)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 69, column 4 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 70, column 4 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 74, column 12 to column 13)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 74, column 4 to column 21)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 78, column 8 to column 25)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 79, column 8 to column 31)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 77, column 4 to line 80, column 5)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 76, column 4 to line 80, column 5)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 103, column 13 to column 14)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 104, column 13 to column 14)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 105, column 26 to column 27)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 106, column 29 to column 30)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 107, column 17 to column 18)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 108, column 13 to column 14)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 109, column 15 to column 16)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 110, column 15 to column 16)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 115, column 20 to column 21)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 116, column 20 to column 21)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 117, column 20 to column 21)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 118, column 20 to column 21)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 119, column 12 to column 13)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 121, column 28 to column 29)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 122, column 24 to column 25)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 123, column 26 to column 27)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 124, column 26 to column 27)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 125, column 37 to column 38)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 126, column 40 to column 41)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 127, column 15 to column 16)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 128, column 15 to column 16)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 202, column 11 to column 12)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 7, column 8 to column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 8, column 8 to column 73)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 9, column 8 to column 19)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 6, column 41 to line 10, column 5)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 13, column 8 to column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 14, column 8 to column 72)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 15, column 8 to column 19)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 12, column 41 to line 16, column 5)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 20, column 8 to column 15)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 21, column 15 to column 23)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 21, column 8 to column 30)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 22, column 8 to column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 23, column 8 to column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 24, column 8 to column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 27, column 12 to column 33)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 44, column 16 to column 32)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 43, column 12 to line 45, column 13)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 34, column 20 to column 70)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 35, column 20 to column 68)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 33, column 20 to line 36, column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 30, column 20 to column 64)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 31, column 20 to column 74)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 29, column 32 to line 32, column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 29, column 16 to line 36, column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 37, column 16 to column 34)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 40, column 20 to column 36)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 39, column 35 to line 41, column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 39, column 16 to line 41, column 17)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 28, column 21 to line 42, column 13)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 28, column 12 to line 45, column 13)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 26, column 29 to line 46, column 9)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 26, column 8 to line 46, column 9)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 47, column 8 to column 29)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 48, column 8 to column 19)",
 " (in 'E:/Workspace/Thesis/ANN-EAM/stan_models/ANN-RDM/sigmoid_am_ndm.stan', line 18, column 115 to line 49, column 5)"};

struct race_lpdf_functor__ {
  template <bool propto__, typename T0__, typename T1__, typename T2__,
            typename T3__, typename T4__, typename T5__,
            stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_col_vector<T4__>,
                                stan::is_vt_not_complex<T4__>,
                                stan::is_col_vector<T5__>,
                                stan::is_vt_not_complex<T5__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                       stan::base_type_t<T4__>,
                       stan::promote_args_t<stan::base_type_t<T5__>>>
  operator()(const T0__& RT, const T1__& ndt, const T2__& b_word,
             const T3__& b_nonword, const T4__& drift_word,
             const T5__& drift_nonword, std::ostream* pstream__) const;
};
struct race_pdf_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& t, const T1__& b, const T2__& v,
             std::ostream* pstream__) const;
};
struct race_cdf_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& t, const T1__& b, const T2__& v,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  race_pdf(const T0__& t, const T1__& b, const T2__& v,
           std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ pdf = DUMMY_VAR__;
      current_statement__ = 151;
      pdf = ((b /
               stan::math::sqrt(
                 ((2 * stan::math::pi()) * stan::math::pow(t, 3)))) *
              stan::math::exp((-stan::math::pow(((v * t) - b), 2) / (2 * t))));
      current_statement__ = 152;
      return pdf;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  race_cdf(const T0__& t, const T1__& b, const T2__& v,
           std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ cdf = DUMMY_VAR__;
      current_statement__ = 155;
      cdf = (stan::math::Phi((((v * t) - b) / stan::math::sqrt(t))) +
              (stan::math::exp(((2 * v) * b)) *
                stan::math::Phi((-((v * t) + b) / stan::math::sqrt(t)))));
      current_statement__ = 156;
      return cdf;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                     stan::base_type_t<T4__>,
                     stan::promote_args_t<stan::base_type_t<T5__>>>
  race_lpdf(const T0__& RT_arg__, const T1__& ndt_arg__,
            const T2__& b_word_arg__, const T3__& b_nonword_arg__,
            const T4__& drift_word_arg__, const T5__& drift_nonword_arg__,
            std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>,
                                 stan::base_type_t<T4__>,
                                 stan::promote_args_t<stan::base_type_t<T5__>>>;
    int current_statement__ = 0; 
    const auto& RT = stan::math::to_ref(RT_arg__);
    const auto& ndt = stan::math::to_ref(ndt_arg__);
    const auto& b_word = stan::math::to_ref(b_word_arg__);
    const auto& b_nonword = stan::math::to_ref(b_nonword_arg__);
    const auto& drift_word = stan::math::to_ref(drift_word_arg__);
    const auto& drift_nonword = stan::math::to_ref(drift_nonword_arg__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ t = DUMMY_VAR__;
      current_statement__ = 159;
      stan::math::validate_non_negative_index("prob", "rows(RT)",
                                              stan::math::rows(RT));
      Eigen::Matrix<local_scalar_t__, -1, 1> prob =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           stan::math::rows(RT), DUMMY_VAR__);
      local_scalar_t__ cdf = DUMMY_VAR__;
      local_scalar_t__ pdf = DUMMY_VAR__;
      local_scalar_t__ out = DUMMY_VAR__;
      current_statement__ = 181;
      for (int i = 1; i <= stan::math::rows(RT); ++i) {
        current_statement__ = 164;
        t = (stan::model::rvalue(RT, "RT",
               stan::model::index_uni(i), stan::model::index_uni(1)) -
              stan::model::rvalue(ndt, "ndt", stan::model::index_uni(i)));
        current_statement__ = 179;
        if (stan::math::logical_gt(t, 0)) {
          current_statement__ = 173;
          if (stan::math::logical_eq(
                stan::model::rvalue(RT, "RT",
                  stan::model::index_uni(i), stan::model::index_uni(2)), 1)) {
            current_statement__ = 170;
            pdf = race_pdf(t,
                    stan::model::rvalue(b_word, "b_word",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(drift_word, "drift_word",
                      stan::model::index_uni(i)), pstream__);
            current_statement__ = 171;
            cdf = (1 -
                    race_cdf(t,
                      stan::model::rvalue(b_nonword, "b_nonword",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(drift_nonword, "drift_nonword",
                        stan::model::index_uni(i)), pstream__));
          } else {
            current_statement__ = 167;
            pdf = race_pdf(t,
                    stan::model::rvalue(b_nonword, "b_nonword",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(drift_nonword, "drift_nonword",
                      stan::model::index_uni(i)), pstream__);
            current_statement__ = 168;
            cdf = (1 -
                    race_cdf(t,
                      stan::model::rvalue(b_word, "b_word",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(drift_word, "drift_word",
                        stan::model::index_uni(i)), pstream__));
          }
          current_statement__ = 174;
          stan::model::assign(prob, (pdf * cdf),
            "assigning variable prob", stan::model::index_uni(i));
          current_statement__ = 177;
          if (stan::math::logical_lt(
                stan::model::rvalue(prob, "prob", stan::model::index_uni(i)),
                1e-10)) {
            current_statement__ = 175;
            stan::model::assign(prob, 1e-10,
              "assigning variable prob", stan::model::index_uni(i));
          } 
        } else {
          current_statement__ = 165;
          stan::model::assign(prob, 1e-10,
            "assigning variable prob", stan::model::index_uni(i));
        }
      }
      current_statement__ = 182;
      out = stan::math::sum(stan::math::log(prob));
      current_statement__ = 183;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                     stan::base_type_t<T4__>,
                     stan::promote_args_t<stan::base_type_t<T5__>>>
race_lpdf_functor__::operator()(const T0__& RT, const T1__& ndt,
                                const T2__& b_word, const T3__& b_nonword,
                                const T4__& drift_word,
                                const T5__& drift_nonword,
                                std::ostream* pstream__)  const
{
  return race_lpdf<propto__>(RT, ndt, b_word, b_nonword, drift_word,
           drift_nonword, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
race_pdf_functor__::operator()(const T0__& t, const T1__& b, const T2__& v,
                               std::ostream* pstream__)  const
{
  return race_pdf(t, b, v, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
race_cdf_functor__::operator()(const T0__& t, const T1__& b, const T2__& v,
                               std::ostream* pstream__)  const
{
  return race_cdf(t, b, v, pstream__);
}


class sigmoid_am_ndm_model final : public model_base_crtp<sigmoid_am_ndm_model> {

 private:
  int N;
  int L;
  std::vector<int> participant;
  std::vector<Eigen::Matrix<double, -1, 1>> p;
  std::vector<int> frequency;
  std::vector<int> response;
  std::vector<double> rt;
  std::vector<double> minRT;
  double RTbound;
  Eigen::Matrix<double, -1, 1> threshold_priors_data__;
  Eigen::Matrix<double, -1, 1> g_priors_data__;
  Eigen::Matrix<double, -1, 1> m_priors_data__;
  Eigen::Matrix<double, -1, 1> alpha_priors_data__;
  Eigen::Matrix<double, -1, 1> b_priors_data__;
  Eigen::Matrix<double, -1, 1> k_priors_data__;
  Eigen::Matrix<double, -1, -1> RT_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> threshold_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> g_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> m_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> alpha_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> b_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> k_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> RT{nullptr, 0, 0};
 
 public:
  ~sigmoid_am_ndm_model() { }
  
  inline std::string model_name() const final { return "sigmoid_am_ndm_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  sigmoid_am_ndm_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "sigmoid_am_ndm_model_namespace::sigmoid_am_ndm_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 101;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 101;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 101;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 102;
      context__.validate_dims("data initialization","L","int",
           std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      
      
      current_statement__ = 102;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("participant", "N", N);
      current_statement__ = 104;
      context__.validate_dims("data initialization","participant","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      participant = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 104;
      participant = context__.vals_i("participant");
      current_statement__ = 104;
      stan::math::check_greater_or_equal(function__, "participant",
                                            participant, 1);
      current_statement__ = 104;
      stan::math::check_less_or_equal(function__, "participant", participant,
                                         L);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("p", "N", N);
      current_statement__ = 106;
      context__.validate_dims("data initialization","p","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(2)});
      p = 
        std::vector<Eigen::Matrix<double, -1, 1>>(N, 
          Eigen::Matrix<double, -1, 1>::Constant(2,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 106;
        p_flat__ = context__.vals_r("p");
        current_statement__ = 106;
        pos__ = 1;
        current_statement__ = 106;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 106;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 106;
            stan::model::assign(p, p_flat__[(pos__ - 1)],
              "assigning variable p", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 106;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 107;
      stan::math::validate_non_negative_index("frequency", "N", N);
      current_statement__ = 108;
      context__.validate_dims("data initialization","frequency","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      frequency = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 108;
      frequency = context__.vals_i("frequency");
      current_statement__ = 108;
      stan::math::check_greater_or_equal(function__, "frequency", frequency,
                                            0);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("response", "N", N);
      current_statement__ = 110;
      context__.validate_dims("data initialization","response","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      response = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 110;
      response = context__.vals_i("response");
      current_statement__ = 110;
      stan::math::check_greater_or_equal(function__, "response", response, 0);
      current_statement__ = 110;
      stan::math::check_less_or_equal(function__, "response", response, 1);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("rt", "N", N);
      current_statement__ = 112;
      context__.validate_dims("data initialization","rt","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      rt = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 112;
      rt = context__.vals_r("rt");
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "rt", rt, 0);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("minRT", "N", N);
      current_statement__ = 114;
      context__.validate_dims("data initialization","minRT","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      minRT = 
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 114;
      minRT = context__.vals_r("minRT");
      current_statement__ = 115;
      context__.validate_dims("data initialization","RTbound","double",
           std::vector<size_t>{});
      RTbound = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 115;
      RTbound = context__.vals_r("RTbound")[(1 - 1)];
      current_statement__ = 116;
      context__.validate_dims("data initialization","threshold_priors",
          "double", std::vector<size_t>{static_cast<size_t>(4)});
      threshold_priors_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&threshold_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(threshold_priors_data__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> threshold_priors_flat__;
        current_statement__ = 116;
        threshold_priors_flat__ = context__.vals_r("threshold_priors");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 116;
          stan::model::assign(threshold_priors,
            threshold_priors_flat__[(pos__ - 1)],
            "assigning variable threshold_priors", stan::model::index_uni(sym1__));
          current_statement__ = 116;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 117;
      context__.validate_dims("data initialization","g_priors","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      g_priors_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&g_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(g_priors_data__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> g_priors_flat__;
        current_statement__ = 117;
        g_priors_flat__ = context__.vals_r("g_priors");
        current_statement__ = 117;
        pos__ = 1;
        current_statement__ = 117;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 117;
          stan::model::assign(g_priors, g_priors_flat__[(pos__ - 1)],
            "assigning variable g_priors", stan::model::index_uni(sym1__));
          current_statement__ = 117;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 118;
      context__.validate_dims("data initialization","m_priors","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      m_priors_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&m_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(m_priors_data__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> m_priors_flat__;
        current_statement__ = 118;
        m_priors_flat__ = context__.vals_r("m_priors");
        current_statement__ = 118;
        pos__ = 1;
        current_statement__ = 118;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 118;
          stan::model::assign(m_priors, m_priors_flat__[(pos__ - 1)],
            "assigning variable m_priors", stan::model::index_uni(sym1__));
          current_statement__ = 118;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 119;
      context__.validate_dims("data initialization","alpha_priors","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      alpha_priors_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&alpha_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(alpha_priors_data__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> alpha_priors_flat__;
        current_statement__ = 119;
        alpha_priors_flat__ = context__.vals_r("alpha_priors");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 119;
          stan::model::assign(alpha_priors, alpha_priors_flat__[(pos__ - 1)],
            "assigning variable alpha_priors", stan::model::index_uni(sym1__));
          current_statement__ = 119;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 120;
      context__.validate_dims("data initialization","b_priors","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      b_priors_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&b_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(b_priors_data__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> b_priors_flat__;
        current_statement__ = 120;
        b_priors_flat__ = context__.vals_r("b_priors");
        current_statement__ = 120;
        pos__ = 1;
        current_statement__ = 120;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 120;
          stan::model::assign(b_priors, b_priors_flat__[(pos__ - 1)],
            "assigning variable b_priors", stan::model::index_uni(sym1__));
          current_statement__ = 120;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 121;
      context__.validate_dims("data initialization","k_priors","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      k_priors_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&k_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(k_priors_data__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> k_priors_flat__;
        current_statement__ = 121;
        k_priors_flat__ = context__.vals_r("k_priors");
        current_statement__ = 121;
        pos__ = 1;
        current_statement__ = 121;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 121;
          stan::model::assign(k_priors, k_priors_flat__[(pos__ - 1)],
            "assigning variable k_priors", stan::model::index_uni(sym1__));
          current_statement__ = 121;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 122;
      stan::math::validate_non_negative_index("RT", "N", N);
      current_statement__ = 123;
      RT_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, 2,
          std::numeric_limits<double>::quiet_NaN());
      new (&RT) Eigen::Map<Eigen::Matrix<double, -1, -1>>(RT_data__.data(), N, 2);
        
      
      current_statement__ = 127;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 124;
        stan::model::assign(RT,
          stan::model::rvalue(rt, "rt", stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
                                     stan::model::index_uni(1));
        current_statement__ = 125;
        stan::model::assign(RT,
          stan::model::rvalue(response, "response",
            stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
                                     stan::model::index_uni(2));
      }
      current_statement__ = 128;
      stan::math::validate_non_negative_index("z_g", "L", L);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("z_m", "L", L);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("z_threshold_word", "L", L);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("z_threshold_nonword", "L", L);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("z_alpha", "L", L);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("z_b", "L", L);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("z_k_1", "L", L);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("z_k_2", "L", L);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("drift_word_t", "N", N);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("drift_nonword_t", "N", N);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("threshold_t_word", "N", N);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("threshold_t_nonword", "N", N);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("ndt_t", "N", N);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("alpha_sbj", "L", L);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("b_sbj", "L", L);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("k_1_sbj", "L", L);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("k_2_sbj", "L", L);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("threshold_sbj_word", "L", L);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("threshold_sbj_nonword", "L", L);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("g_sbj", "L", L);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("m_sbj", "L", L);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 
      1 + 1 + 1 + 1 + L + L + L + L + L + L + L + L;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "sigmoid_am_ndm_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu_g = DUMMY_VAR__;
      current_statement__ = 1;
      mu_g = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_m = DUMMY_VAR__;
      current_statement__ = 2;
      mu_m = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_threshold_word = DUMMY_VAR__;
      current_statement__ = 3;
      mu_threshold_word = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_threshold_nonword = DUMMY_VAR__;
      current_statement__ = 4;
      mu_threshold_nonword = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_alpha = DUMMY_VAR__;
      current_statement__ = 5;
      mu_alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_b = DUMMY_VAR__;
      current_statement__ = 6;
      mu_b = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_k_1 = DUMMY_VAR__;
      current_statement__ = 7;
      mu_k_1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_k_2 = DUMMY_VAR__;
      current_statement__ = 8;
      mu_k_2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ sd_g = DUMMY_VAR__;
      current_statement__ = 9;
      sd_g = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ sd_m = DUMMY_VAR__;
      current_statement__ = 10;
      sd_m = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ sd_threshold_word = DUMMY_VAR__;
      current_statement__ = 11;
      sd_threshold_word = in__.template read_constrain_lb<local_scalar_t__, 
                            jacobian__>(0, lp__);
      local_scalar_t__ sd_threshold_nonword = DUMMY_VAR__;
      current_statement__ = 12;
      sd_threshold_nonword = in__.template read_constrain_lb<
                               local_scalar_t__, jacobian__>(0, lp__);
      local_scalar_t__ sd_alpha = DUMMY_VAR__;
      current_statement__ = 13;
      sd_alpha = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      local_scalar_t__ sd_b = DUMMY_VAR__;
      current_statement__ = 14;
      sd_b = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ sd_k_1 = DUMMY_VAR__;
      current_statement__ = 15;
      sd_k_1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ sd_k_2 = DUMMY_VAR__;
      current_statement__ = 16;
      sd_k_2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      std::vector<local_scalar_t__> z_g =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 17;
      z_g = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_m =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 18;
      z_m = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_threshold_word =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 19;
      z_threshold_word = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_threshold_nonword =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 20;
      z_threshold_nonword = in__.template read<
                              std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_alpha =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 21;
      z_alpha = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_b =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 22;
      z_b = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_k_1 =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 23;
      z_k_1 = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_k_2 =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 24;
      z_k_2 = in__.template read<std::vector<local_scalar_t__>>(L);
      Eigen::Matrix<local_scalar_t__, -1, 1> drift_word_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> drift_nonword_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> threshold_t_word =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> threshold_t_nonword =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> ndt_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> alpha_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> b_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> k_1_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> k_2_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> threshold_sbj_word =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> threshold_sbj_nonword =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> g_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> m_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      local_scalar_t__ transf_mu_alpha = DUMMY_VAR__;
      local_scalar_t__ transf_mu_b = DUMMY_VAR__;
      local_scalar_t__ transf_mu_k_1 = DUMMY_VAR__;
      local_scalar_t__ transf_mu_k_2 = DUMMY_VAR__;
      local_scalar_t__ transf_mu_threshold_word = DUMMY_VAR__;
      local_scalar_t__ transf_mu_threshold_nonword = DUMMY_VAR__;
      local_scalar_t__ transf_mu_g = DUMMY_VAR__;
      local_scalar_t__ transf_mu_m = DUMMY_VAR__;
      current_statement__ = 46;
      transf_mu_alpha = stan::math::log((1 + stan::math::exp(mu_alpha)));
      current_statement__ = 47;
      transf_mu_b = stan::math::log((1 + stan::math::exp(mu_b)));
      current_statement__ = 48;
      transf_mu_k_1 = stan::math::log((1 + stan::math::exp(mu_k_1)));
      current_statement__ = 49;
      transf_mu_k_2 = stan::math::log((1 + stan::math::exp(mu_k_2)));
      current_statement__ = 50;
      transf_mu_threshold_word = stan::math::log(
                                   (1 + stan::math::exp(mu_threshold_word)));
      current_statement__ = 51;
      transf_mu_threshold_nonword = stan::math::log(
                                      (1 +
                                        stan::math::exp(mu_threshold_nonword)));
      current_statement__ = 52;
      transf_mu_g = stan::math::log((1 + stan::math::exp(mu_g)));
      current_statement__ = 53;
      transf_mu_m = stan::math::log((1 + stan::math::exp(mu_m)));
      current_statement__ = 63;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 54;
        stan::model::assign(alpha_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_alpha +
                  (stan::model::rvalue(z_alpha, "z_alpha",
                     stan::model::index_uni(l)) * sd_alpha))))),
          "assigning variable alpha_sbj", stan::model::index_uni(l));
        current_statement__ = 55;
        stan::model::assign(b_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_b +
                  (stan::model::rvalue(z_b, "z_b", stan::model::index_uni(l))
                    * sd_b))))),
          "assigning variable b_sbj", stan::model::index_uni(l));
        current_statement__ = 56;
        stan::model::assign(k_1_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_k_1 +
                  (stan::model::rvalue(z_k_1, "z_k_1",
                     stan::model::index_uni(l)) * sd_k_1))))),
          "assigning variable k_1_sbj", stan::model::index_uni(l));
        current_statement__ = 57;
        stan::model::assign(k_2_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_k_2 +
                  (stan::model::rvalue(z_k_2, "z_k_2",
                     stan::model::index_uni(l)) * sd_k_2))))),
          "assigning variable k_2_sbj", stan::model::index_uni(l));
        current_statement__ = 58;
        stan::model::assign(threshold_sbj_word,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_threshold_word +
                  (stan::model::rvalue(z_threshold_word, "z_threshold_word",
                     stan::model::index_uni(l)) * sd_threshold_word))))),
          "assigning variable threshold_sbj_word", stan::model::index_uni(l));
        current_statement__ = 59;
        stan::model::assign(threshold_sbj_nonword,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_threshold_nonword +
                  (stan::model::rvalue(z_threshold_nonword,
                     "z_threshold_nonword", stan::model::index_uni(l)) *
                    sd_threshold_nonword))))),
          "assigning variable threshold_sbj_nonword", stan::model::index_uni(l));
        current_statement__ = 60;
        stan::model::assign(g_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_g +
                  (stan::model::rvalue(z_g, "z_g", stan::model::index_uni(l))
                    * sd_g))))),
          "assigning variable g_sbj", stan::model::index_uni(l));
        current_statement__ = 61;
        stan::model::assign(m_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_m +
                  (stan::model::rvalue(z_m, "z_m", stan::model::index_uni(l))
                    * sd_m))))),
          "assigning variable m_sbj", stan::model::index_uni(l));
      }
      current_statement__ = 70;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 64;
        stan::model::assign(drift_word_t,
          ((stan::model::rvalue(k_1_sbj, "k_1_sbj",
              stan::model::index_uni(stan::model::rvalue(participant,
                                       "participant",
                                       stan::model::index_uni(n)))) +
             (stan::model::rvalue(b_sbj, "b_sbj",
                stan::model::index_uni(stan::model::rvalue(participant,
                                         "participant",
                                         stan::model::index_uni(n)))) *
               stan::model::rvalue(frequency, "frequency",
                 stan::model::index_uni(n)))) /
            (1 +
              stan::math::exp(
                (-stan::model::rvalue(alpha_sbj, "alpha_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n)))) *
                  (stan::model::rvalue(
                     stan::model::rvalue(p, "p", stan::model::index_uni(n)),
                     "p[n]", stan::model::index_uni(1)) - 0.5))))),
          "assigning variable drift_word_t", stan::model::index_uni(n));
        current_statement__ = 65;
        stan::model::assign(drift_nonword_t,
          (stan::model::rvalue(k_2_sbj, "k_2_sbj",
             stan::model::index_uni(stan::model::rvalue(participant,
                                      "participant",
                                      stan::model::index_uni(n)))) /
            (1 +
              stan::math::exp(
                (-stan::model::rvalue(alpha_sbj, "alpha_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n)))) *
                  (stan::model::rvalue(
                     stan::model::rvalue(p, "p", stan::model::index_uni(n)),
                     "p[n]", stan::model::index_uni(2)) - 0.5))))),
          "assigning variable drift_nonword_t", stan::model::index_uni(n));
        current_statement__ = 66;
        stan::model::assign(threshold_t_word,
          stan::model::rvalue(threshold_sbj_word, "threshold_sbj_word",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable threshold_t_word", stan::model::index_uni(n));
        current_statement__ = 67;
        stan::model::assign(threshold_t_nonword,
          stan::model::rvalue(threshold_sbj_nonword, "threshold_sbj_nonword",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable threshold_t_nonword", stan::model::index_uni(n));
        current_statement__ = 68;
        stan::model::assign(ndt_t,
          (((stan::model::rvalue(m_sbj, "m_sbj",
               stan::model::index_uni(stan::model::rvalue(participant,
                                        "participant",
                                        stan::model::index_uni(n)))) +
              (stan::model::rvalue(g_sbj, "g_sbj",
                 stan::model::index_uni(stan::model::rvalue(participant,
                                          "participant",
                                          stan::model::index_uni(n)))) *
                stan::math::exp(
                  -stan::model::rvalue(frequency, "frequency",
                     stan::model::index_uni(n))))) *
             (stan::model::rvalue(minRT, "minRT", stan::model::index_uni(n))
               - RTbound)) + RTbound),
          "assigning variable ndt_t", stan::model::index_uni(n));
      }
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "drift_word_t",
                                            drift_word_t, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "drift_nonword_t",
                                            drift_nonword_t, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "threshold_t_word",
                                            threshold_t_word, 0);
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "threshold_t_nonword",
                                            threshold_t_nonword, 0);
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "alpha_sbj", alpha_sbj,
                                            0);
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "b_sbj", b_sbj, 0);
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "k_1_sbj", k_1_sbj, 0);
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "k_2_sbj", k_2_sbj, 0);
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "threshold_sbj_word",
                                            threshold_sbj_word, 0);
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "threshold_sbj_nonword",
                                            threshold_sbj_nonword, 0);
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "transf_mu_alpha",
                                            transf_mu_alpha, 0);
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "transf_mu_b",
                                            transf_mu_b, 0);
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "transf_mu_k_1",
                                            transf_mu_k_1, 0);
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "transf_mu_k_2",
                                            transf_mu_k_2, 0);
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "transf_mu_threshold_word",
                                            transf_mu_threshold_word, 0);
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "transf_mu_threshold_nonword",
                                            transf_mu_threshold_nonword, 0);
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "transf_mu_g",
                                            transf_mu_g, 0);
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "transf_mu_m",
                                            transf_mu_m, 0);
      {
        current_statement__ = 76;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_threshold_word,
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(2))));
        current_statement__ = 77;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_threshold_nonword,
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(2))));
        current_statement__ = 78;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_g,
            stan::model::rvalue(g_priors, "g_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(g_priors, "g_priors",
              stan::model::index_uni(2))));
        current_statement__ = 79;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_m,
            stan::model::rvalue(m_priors, "m_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(m_priors, "m_priors",
              stan::model::index_uni(2))));
        current_statement__ = 80;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_alpha,
            stan::model::rvalue(alpha_priors, "alpha_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(alpha_priors, "alpha_priors",
              stan::model::index_uni(2))));
        current_statement__ = 81;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_b,
            stan::model::rvalue(b_priors, "b_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(b_priors, "b_priors",
              stan::model::index_uni(2))));
        current_statement__ = 82;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_k_1,
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(2))));
        current_statement__ = 83;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_k_2,
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(2))));
        current_statement__ = 84;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_threshold_word,
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(4))));
        current_statement__ = 85;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_threshold_nonword,
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(4))));
        current_statement__ = 86;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_g,
            stan::model::rvalue(g_priors, "g_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(g_priors, "g_priors",
              stan::model::index_uni(4))));
        current_statement__ = 87;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_m,
            stan::model::rvalue(m_priors, "m_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(m_priors, "m_priors",
              stan::model::index_uni(4))));
        current_statement__ = 88;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_alpha,
            stan::model::rvalue(alpha_priors, "alpha_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(alpha_priors, "alpha_priors",
              stan::model::index_uni(4))));
        current_statement__ = 89;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_b,
            stan::model::rvalue(b_priors, "b_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(b_priors, "b_priors",
              stan::model::index_uni(4))));
        current_statement__ = 90;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_k_1,
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(4))));
        current_statement__ = 91;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_k_2,
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(4))));
        current_statement__ = 92;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(z_threshold_word, 0, 1));
        current_statement__ = 93;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(z_threshold_nonword, 0, 1));
        current_statement__ = 94;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_g, 0, 1));
        current_statement__ = 95;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_m, 0, 1));
        current_statement__ = 96;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_alpha, 0, 1));
        current_statement__ = 97;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_b, 0, 1));
        current_statement__ = 98;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_k_1, 0, 1));
        current_statement__ = 99;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_k_2, 0, 1));
        current_statement__ = 100;
        lp_accum__.add(
          race_lpdf<propto__>(RT, ndt_t, threshold_t_word,
            threshold_t_nonword, drift_word_t, drift_nonword_t, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "sigmoid_am_ndm_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu_g = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu_g = in__.template read<local_scalar_t__>();
      double mu_m = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      mu_m = in__.template read<local_scalar_t__>();
      double mu_threshold_word = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      mu_threshold_word = in__.template read<local_scalar_t__>();
      double mu_threshold_nonword = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      mu_threshold_nonword = in__.template read<local_scalar_t__>();
      double mu_alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      mu_alpha = in__.template read<local_scalar_t__>();
      double mu_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      mu_b = in__.template read<local_scalar_t__>();
      double mu_k_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      mu_k_1 = in__.template read<local_scalar_t__>();
      double mu_k_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      mu_k_2 = in__.template read<local_scalar_t__>();
      double sd_g = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      sd_g = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double sd_m = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sd_m = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double sd_threshold_word = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      sd_threshold_word = in__.template read_constrain_lb<local_scalar_t__, 
                            jacobian__>(0, lp__);
      double sd_threshold_nonword = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      sd_threshold_nonword = in__.template read_constrain_lb<
                               local_scalar_t__, jacobian__>(0, lp__);
      double sd_alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      sd_alpha = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      double sd_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      sd_b = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double sd_k_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      sd_k_1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double sd_k_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 16;
      sd_k_2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      std::vector<double> z_g =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      z_g = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_m =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      z_m = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_threshold_word =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      z_threshold_word = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_threshold_nonword =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      z_threshold_nonword = in__.template read<
                              std::vector<local_scalar_t__>>(L);
      std::vector<double> z_alpha =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 21;
      z_alpha = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_b =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 22;
      z_b = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_k_1 =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 23;
      z_k_1 = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_k_2 =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 24;
      z_k_2 = in__.template read<std::vector<local_scalar_t__>>(L);
      Eigen::Matrix<double, -1, 1> drift_word_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> drift_nonword_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> threshold_t_word =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> threshold_t_nonword =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> ndt_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> alpha_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> b_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> k_1_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> k_2_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> threshold_sbj_word =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> threshold_sbj_nonword =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> g_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> m_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      double transf_mu_alpha = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_b = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_k_1 = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_k_2 = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_threshold_word =
         std::numeric_limits<double>::quiet_NaN();
      double transf_mu_threshold_nonword =
         std::numeric_limits<double>::quiet_NaN();
      double transf_mu_g = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_m = std::numeric_limits<double>::quiet_NaN();
      out__.write(mu_g);
      out__.write(mu_m);
      out__.write(mu_threshold_word);
      out__.write(mu_threshold_nonword);
      out__.write(mu_alpha);
      out__.write(mu_b);
      out__.write(mu_k_1);
      out__.write(mu_k_2);
      out__.write(sd_g);
      out__.write(sd_m);
      out__.write(sd_threshold_word);
      out__.write(sd_threshold_nonword);
      out__.write(sd_alpha);
      out__.write(sd_b);
      out__.write(sd_k_1);
      out__.write(sd_k_2);
      out__.write(z_g);
      out__.write(z_m);
      out__.write(z_threshold_word);
      out__.write(z_threshold_nonword);
      out__.write(z_alpha);
      out__.write(z_b);
      out__.write(z_k_1);
      out__.write(z_k_2);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 46;
      transf_mu_alpha = stan::math::log((1 + stan::math::exp(mu_alpha)));
      current_statement__ = 47;
      transf_mu_b = stan::math::log((1 + stan::math::exp(mu_b)));
      current_statement__ = 48;
      transf_mu_k_1 = stan::math::log((1 + stan::math::exp(mu_k_1)));
      current_statement__ = 49;
      transf_mu_k_2 = stan::math::log((1 + stan::math::exp(mu_k_2)));
      current_statement__ = 50;
      transf_mu_threshold_word = stan::math::log(
                                   (1 + stan::math::exp(mu_threshold_word)));
      current_statement__ = 51;
      transf_mu_threshold_nonword = stan::math::log(
                                      (1 +
                                        stan::math::exp(mu_threshold_nonword)));
      current_statement__ = 52;
      transf_mu_g = stan::math::log((1 + stan::math::exp(mu_g)));
      current_statement__ = 53;
      transf_mu_m = stan::math::log((1 + stan::math::exp(mu_m)));
      current_statement__ = 63;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 54;
        stan::model::assign(alpha_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_alpha +
                  (stan::model::rvalue(z_alpha, "z_alpha",
                     stan::model::index_uni(l)) * sd_alpha))))),
          "assigning variable alpha_sbj", stan::model::index_uni(l));
        current_statement__ = 55;
        stan::model::assign(b_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_b +
                  (stan::model::rvalue(z_b, "z_b", stan::model::index_uni(l))
                    * sd_b))))),
          "assigning variable b_sbj", stan::model::index_uni(l));
        current_statement__ = 56;
        stan::model::assign(k_1_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_k_1 +
                  (stan::model::rvalue(z_k_1, "z_k_1",
                     stan::model::index_uni(l)) * sd_k_1))))),
          "assigning variable k_1_sbj", stan::model::index_uni(l));
        current_statement__ = 57;
        stan::model::assign(k_2_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_k_2 +
                  (stan::model::rvalue(z_k_2, "z_k_2",
                     stan::model::index_uni(l)) * sd_k_2))))),
          "assigning variable k_2_sbj", stan::model::index_uni(l));
        current_statement__ = 58;
        stan::model::assign(threshold_sbj_word,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_threshold_word +
                  (stan::model::rvalue(z_threshold_word, "z_threshold_word",
                     stan::model::index_uni(l)) * sd_threshold_word))))),
          "assigning variable threshold_sbj_word", stan::model::index_uni(l));
        current_statement__ = 59;
        stan::model::assign(threshold_sbj_nonword,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_threshold_nonword +
                  (stan::model::rvalue(z_threshold_nonword,
                     "z_threshold_nonword", stan::model::index_uni(l)) *
                    sd_threshold_nonword))))),
          "assigning variable threshold_sbj_nonword", stan::model::index_uni(l));
        current_statement__ = 60;
        stan::model::assign(g_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_g +
                  (stan::model::rvalue(z_g, "z_g", stan::model::index_uni(l))
                    * sd_g))))),
          "assigning variable g_sbj", stan::model::index_uni(l));
        current_statement__ = 61;
        stan::model::assign(m_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_m +
                  (stan::model::rvalue(z_m, "z_m", stan::model::index_uni(l))
                    * sd_m))))),
          "assigning variable m_sbj", stan::model::index_uni(l));
      }
      current_statement__ = 70;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 64;
        stan::model::assign(drift_word_t,
          ((stan::model::rvalue(k_1_sbj, "k_1_sbj",
              stan::model::index_uni(stan::model::rvalue(participant,
                                       "participant",
                                       stan::model::index_uni(n)))) +
             (stan::model::rvalue(b_sbj, "b_sbj",
                stan::model::index_uni(stan::model::rvalue(participant,
                                         "participant",
                                         stan::model::index_uni(n)))) *
               stan::model::rvalue(frequency, "frequency",
                 stan::model::index_uni(n)))) /
            (1 +
              stan::math::exp(
                (-stan::model::rvalue(alpha_sbj, "alpha_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n)))) *
                  (stan::model::rvalue(
                     stan::model::rvalue(p, "p", stan::model::index_uni(n)),
                     "p[n]", stan::model::index_uni(1)) - 0.5))))),
          "assigning variable drift_word_t", stan::model::index_uni(n));
        current_statement__ = 65;
        stan::model::assign(drift_nonword_t,
          (stan::model::rvalue(k_2_sbj, "k_2_sbj",
             stan::model::index_uni(stan::model::rvalue(participant,
                                      "participant",
                                      stan::model::index_uni(n)))) /
            (1 +
              stan::math::exp(
                (-stan::model::rvalue(alpha_sbj, "alpha_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n)))) *
                  (stan::model::rvalue(
                     stan::model::rvalue(p, "p", stan::model::index_uni(n)),
                     "p[n]", stan::model::index_uni(2)) - 0.5))))),
          "assigning variable drift_nonword_t", stan::model::index_uni(n));
        current_statement__ = 66;
        stan::model::assign(threshold_t_word,
          stan::model::rvalue(threshold_sbj_word, "threshold_sbj_word",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable threshold_t_word", stan::model::index_uni(n));
        current_statement__ = 67;
        stan::model::assign(threshold_t_nonword,
          stan::model::rvalue(threshold_sbj_nonword, "threshold_sbj_nonword",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable threshold_t_nonword", stan::model::index_uni(n));
        current_statement__ = 68;
        stan::model::assign(ndt_t,
          (((stan::model::rvalue(m_sbj, "m_sbj",
               stan::model::index_uni(stan::model::rvalue(participant,
                                        "participant",
                                        stan::model::index_uni(n)))) +
              (stan::model::rvalue(g_sbj, "g_sbj",
                 stan::model::index_uni(stan::model::rvalue(participant,
                                          "participant",
                                          stan::model::index_uni(n)))) *
                stan::math::exp(
                  -stan::model::rvalue(frequency, "frequency",
                     stan::model::index_uni(n))))) *
             (stan::model::rvalue(minRT, "minRT", stan::model::index_uni(n))
               - RTbound)) + RTbound),
          "assigning variable ndt_t", stan::model::index_uni(n));
      }
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "drift_word_t",
                                            drift_word_t, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "drift_nonword_t",
                                            drift_nonword_t, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "threshold_t_word",
                                            threshold_t_word, 0);
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "threshold_t_nonword",
                                            threshold_t_nonword, 0);
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "alpha_sbj", alpha_sbj,
                                            0);
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "b_sbj", b_sbj, 0);
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "k_1_sbj", k_1_sbj, 0);
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "k_2_sbj", k_2_sbj, 0);
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "threshold_sbj_word",
                                            threshold_sbj_word, 0);
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "threshold_sbj_nonword",
                                            threshold_sbj_nonword, 0);
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "transf_mu_alpha",
                                            transf_mu_alpha, 0);
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "transf_mu_b",
                                            transf_mu_b, 0);
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "transf_mu_k_1",
                                            transf_mu_k_1, 0);
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "transf_mu_k_2",
                                            transf_mu_k_2, 0);
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "transf_mu_threshold_word",
                                            transf_mu_threshold_word, 0);
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "transf_mu_threshold_nonword",
                                            transf_mu_threshold_nonword, 0);
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "transf_mu_g",
                                            transf_mu_g, 0);
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "transf_mu_m",
                                            transf_mu_m, 0);
      if (emit_transformed_parameters__) {
        out__.write(drift_word_t);
        out__.write(drift_nonword_t);
        out__.write(threshold_t_word);
        out__.write(threshold_t_nonword);
        out__.write(ndt_t);
        out__.write(alpha_sbj);
        out__.write(b_sbj);
        out__.write(k_1_sbj);
        out__.write(k_2_sbj);
        out__.write(threshold_sbj_word);
        out__.write(threshold_sbj_nonword);
        out__.write(g_sbj);
        out__.write(m_sbj);
        out__.write(transf_mu_alpha);
        out__.write(transf_mu_b);
        out__.write(transf_mu_k_1);
        out__.write(transf_mu_k_2);
        out__.write(transf_mu_threshold_word);
        out__.write(transf_mu_threshold_nonword);
        out__.write(transf_mu_g);
        out__.write(transf_mu_m);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 74;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 72;
          stan::model::assign(log_lik,
            race_lpdf<false>(stan::math::block(RT, n, 1, 1, 2),
              stan::math::segment(ndt_t, n, 1),
              stan::math::segment(threshold_t_word, n, 1),
              stan::math::segment(threshold_t_nonword, n, 1),
              stan::math::segment(drift_word_t, n, 1),
              stan::math::segment(drift_nonword_t, n, 1), pstream__),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu_g = DUMMY_VAR__;
      mu_g = in__.read<local_scalar_t__>();
      out__.write(mu_g);
      local_scalar_t__ mu_m = DUMMY_VAR__;
      mu_m = in__.read<local_scalar_t__>();
      out__.write(mu_m);
      local_scalar_t__ mu_threshold_word = DUMMY_VAR__;
      mu_threshold_word = in__.read<local_scalar_t__>();
      out__.write(mu_threshold_word);
      local_scalar_t__ mu_threshold_nonword = DUMMY_VAR__;
      mu_threshold_nonword = in__.read<local_scalar_t__>();
      out__.write(mu_threshold_nonword);
      local_scalar_t__ mu_alpha = DUMMY_VAR__;
      mu_alpha = in__.read<local_scalar_t__>();
      out__.write(mu_alpha);
      local_scalar_t__ mu_b = DUMMY_VAR__;
      mu_b = in__.read<local_scalar_t__>();
      out__.write(mu_b);
      local_scalar_t__ mu_k_1 = DUMMY_VAR__;
      mu_k_1 = in__.read<local_scalar_t__>();
      out__.write(mu_k_1);
      local_scalar_t__ mu_k_2 = DUMMY_VAR__;
      mu_k_2 = in__.read<local_scalar_t__>();
      out__.write(mu_k_2);
      local_scalar_t__ sd_g = DUMMY_VAR__;
      sd_g = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_g);
      local_scalar_t__ sd_m = DUMMY_VAR__;
      sd_m = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_m);
      local_scalar_t__ sd_threshold_word = DUMMY_VAR__;
      sd_threshold_word = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_threshold_word);
      local_scalar_t__ sd_threshold_nonword = DUMMY_VAR__;
      sd_threshold_nonword = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_threshold_nonword);
      local_scalar_t__ sd_alpha = DUMMY_VAR__;
      sd_alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_alpha);
      local_scalar_t__ sd_b = DUMMY_VAR__;
      sd_b = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_b);
      local_scalar_t__ sd_k_1 = DUMMY_VAR__;
      sd_k_1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_k_1);
      local_scalar_t__ sd_k_2 = DUMMY_VAR__;
      sd_k_2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_k_2);
      std::vector<local_scalar_t__> z_g =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_g[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_g);
      std::vector<local_scalar_t__> z_m =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_m[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_m);
      std::vector<local_scalar_t__> z_threshold_word =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_threshold_word[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_threshold_word);
      std::vector<local_scalar_t__> z_threshold_nonword =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_threshold_nonword[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_threshold_nonword);
      std::vector<local_scalar_t__> z_alpha =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_alpha[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_alpha);
      std::vector<local_scalar_t__> z_b =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_b[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_b);
      std::vector<local_scalar_t__> z_k_1 =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_k_1[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_k_1);
      std::vector<local_scalar_t__> z_k_2 =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_k_2[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_k_2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_g", "mu_m", "mu_threshold_word",
      "mu_threshold_nonword", "mu_alpha", "mu_b", "mu_k_1", "mu_k_2", "sd_g",
      "sd_m", "sd_threshold_word", "sd_threshold_nonword", "sd_alpha",
      "sd_b", "sd_k_1", "sd_k_2", "z_g", "z_m", "z_threshold_word",
      "z_threshold_nonword", "z_alpha", "z_b", "z_k_1", "z_k_2",
      "drift_word_t", "drift_nonword_t", "threshold_t_word",
      "threshold_t_nonword", "ndt_t", "alpha_sbj", "b_sbj", "k_1_sbj",
      "k_2_sbj", "threshold_sbj_word", "threshold_sbj_nonword", "g_sbj",
      "m_sbj", "transf_mu_alpha", "transf_mu_b", "transf_mu_k_1",
      "transf_mu_k_2", "transf_mu_threshold_word",
      "transf_mu_threshold_nonword", "transf_mu_g", "transf_mu_m",
      "log_lik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_g");
    param_names__.emplace_back(std::string() + "mu_m");
    param_names__.emplace_back(std::string() + "mu_threshold_word");
    param_names__.emplace_back(std::string() + "mu_threshold_nonword");
    param_names__.emplace_back(std::string() + "mu_alpha");
    param_names__.emplace_back(std::string() + "mu_b");
    param_names__.emplace_back(std::string() + "mu_k_1");
    param_names__.emplace_back(std::string() + "mu_k_2");
    param_names__.emplace_back(std::string() + "sd_g");
    param_names__.emplace_back(std::string() + "sd_m");
    param_names__.emplace_back(std::string() + "sd_threshold_word");
    param_names__.emplace_back(std::string() + "sd_threshold_nonword");
    param_names__.emplace_back(std::string() + "sd_alpha");
    param_names__.emplace_back(std::string() + "sd_b");
    param_names__.emplace_back(std::string() + "sd_k_1");
    param_names__.emplace_back(std::string() + "sd_k_2");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_g" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_m" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_threshold_word" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_threshold_nonword" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_b" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_k_1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_k_2" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_word_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_nonword_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t_word" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t_nonword" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_1_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_2_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_sbj_word" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_sbj_nonword" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "g_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "transf_mu_alpha");
      param_names__.emplace_back(std::string() + "transf_mu_b");
      param_names__.emplace_back(std::string() + "transf_mu_k_1");
      param_names__.emplace_back(std::string() + "transf_mu_k_2");
      param_names__.emplace_back(std::string() + "transf_mu_threshold_word");
      param_names__.emplace_back(std::string() + "transf_mu_threshold_nonword");
      param_names__.emplace_back(std::string() + "transf_mu_g");
      param_names__.emplace_back(std::string() + "transf_mu_m");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_g");
    param_names__.emplace_back(std::string() + "mu_m");
    param_names__.emplace_back(std::string() + "mu_threshold_word");
    param_names__.emplace_back(std::string() + "mu_threshold_nonword");
    param_names__.emplace_back(std::string() + "mu_alpha");
    param_names__.emplace_back(std::string() + "mu_b");
    param_names__.emplace_back(std::string() + "mu_k_1");
    param_names__.emplace_back(std::string() + "mu_k_2");
    param_names__.emplace_back(std::string() + "sd_g");
    param_names__.emplace_back(std::string() + "sd_m");
    param_names__.emplace_back(std::string() + "sd_threshold_word");
    param_names__.emplace_back(std::string() + "sd_threshold_nonword");
    param_names__.emplace_back(std::string() + "sd_alpha");
    param_names__.emplace_back(std::string() + "sd_b");
    param_names__.emplace_back(std::string() + "sd_k_1");
    param_names__.emplace_back(std::string() + "sd_k_2");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_g" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_m" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_threshold_word" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_threshold_nonword" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_b" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_k_1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_k_2" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_word_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_nonword_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t_word" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t_nonword" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_1_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_2_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_sbj_word" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_sbj_nonword" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "g_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "transf_mu_alpha");
      param_names__.emplace_back(std::string() + "transf_mu_b");
      param_names__.emplace_back(std::string() + "transf_mu_k_1");
      param_names__.emplace_back(std::string() + "transf_mu_k_2");
      param_names__.emplace_back(std::string() + "transf_mu_threshold_word");
      param_names__.emplace_back(std::string() + "transf_mu_threshold_nonword");
      param_names__.emplace_back(std::string() + "transf_mu_g");
      param_names__.emplace_back(std::string() + "transf_mu_m");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_threshold_word\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_threshold_nonword\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_k_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_k_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_threshold_word\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_threshold_nonword\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_k_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_k_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_g\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_m\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_threshold_word\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_threshold_nonword\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_k_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_k_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"drift_word_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_nonword_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t_word\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t_nonword\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"b_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k_1_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k_2_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_sbj_word\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_sbj_nonword\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"g_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_k_1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_k_2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_threshold_word\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_threshold_nonword\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_g\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_m\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_threshold_word\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_threshold_nonword\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_k_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_k_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_threshold_word\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_threshold_nonword\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_k_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_k_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_g\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_m\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_threshold_word\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_threshold_nonword\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_k_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_k_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"drift_word_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_nonword_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t_word\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t_nonword\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"b_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k_1_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"k_2_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_sbj_word\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_sbj_nonword\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"g_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_k_1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_k_2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_threshold_word\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_threshold_nonword\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_g\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_m\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
                + 1) + 1) + 1) + 1) + 1) + L) + L) + L) + L) + L) + L) + L) +
    L);
      const size_t num_transformed = emit_transformed_parameters * 
  ((((((((((((((((((((N + N) + N) + N) + N) + L) + L) + L) + L) + L) + L) +
             L) + L) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_gen_quantities = emit_generated_quantities * N;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
                + 1) + 1) + 1) + 1) + 1) + L) + L) + L) + L) + L) + L) + L) +
    L);
      const size_t num_transformed = emit_transformed_parameters * 
  ((((((((((((((((((((N + N) + N) + N) + N) + L) + L) + L) + L) + L) + L) +
             L) + L) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_gen_quantities = emit_generated_quantities * N;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 24> names__{"mu_g", "mu_m",
      "mu_threshold_word", "mu_threshold_nonword", "mu_alpha", "mu_b",
      "mu_k_1", "mu_k_2", "sd_g", "sd_m", "sd_threshold_word",
      "sd_threshold_nonword", "sd_alpha", "sd_b", "sd_k_1", "sd_k_2", "z_g",
      "z_m", "z_threshold_word", "z_threshold_nonword", "z_alpha", "z_b",
      "z_k_1", "z_k_2"};
      const std::array<Eigen::Index, 24> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, L, L, L, L, L, L, L, 
       L};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = sigmoid_am_ndm_model_namespace::sigmoid_am_ndm_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return sigmoid_am_ndm_model_namespace::profiles__;
}

#endif


